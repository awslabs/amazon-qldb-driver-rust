// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_send_command_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCommandInput,
) {
    if let Some(var_1) = &input.ledger_name {
        object.key("LedgerName").string(var_1);
    }
    {
        let mut object_2 = object.key("CommandStream").start_object();
        crate::json_ser::serialize_union_crate_model_command_stream(
            &mut object_2,
            &input.command_stream,
        );
        object_2.finish();
    }
}

pub fn serialize_union_crate_model_command_stream(
    object_2: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommandStream,
) {
    match input {
        crate::model::CommandStream::StartTransaction(inner) => {
            let mut object_3 = object_2.key("StartTransaction").start_object();
            crate::json_ser::serialize_structure_crate_model_start_transaction_request(
                &mut object_3,
                inner,
            );
            object_3.finish();
        }
        crate::model::CommandStream::CommitTransaction(inner) => {
            let mut object_4 = object_2.key("CommitTransaction").start_object();
            crate::json_ser::serialize_structure_crate_model_commit_transaction_request(
                &mut object_4,
                inner,
            );
            object_4.finish();
        }
        crate::model::CommandStream::AbortTransaction(inner) => {
            let mut object_5 = object_2.key("AbortTransaction").start_object();
            crate::json_ser::serialize_structure_crate_model_abort_transaction_request(
                &mut object_5,
                inner,
            );
            object_5.finish();
        }
        crate::model::CommandStream::ExecuteStatement(inner) => {
            let mut object_6 = object_2.key("ExecuteStatement").start_object();
            crate::json_ser::serialize_structure_crate_model_execute_statement_request(
                &mut object_6,
                inner,
            );
            object_6.finish();
        }
        crate::model::CommandStream::FetchPage(inner) => {
            let mut object_7 = object_2.key("FetchPage").start_object();
            crate::json_ser::serialize_structure_crate_model_fetch_page_request(
                &mut object_7,
                inner,
            );
            object_7.finish();
        }
        crate::model::CommandStream::EndSession(inner) => {
            let mut object_8 = object_2.key("EndSession").start_object();
            crate::json_ser::serialize_structure_crate_model_end_session_request(
                &mut object_8,
                inner,
            );
            object_8.finish();
        }
    }
}

pub fn serialize_structure_crate_model_start_transaction_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTransactionRequest,
) {
    if let Some(var_9) = &input.field_to_satisfy_sdk_code_gen {
        object.key("FieldToSatisfySdkCodeGen").string(var_9);
    }
}

pub fn serialize_structure_crate_model_commit_transaction_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommitTransactionRequest,
) {
    if let Some(var_10) = &input.transaction_id {
        object.key("TransactionId").string(var_10);
    }
    if let Some(var_11) = &input.commit_digest {
        object
            .key("CommitDigest")
            .string_unchecked(&smithy_types::base64::encode(var_11));
    }
}

pub fn serialize_structure_crate_model_abort_transaction_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortTransactionRequest,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_execute_statement_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecuteStatementRequest,
) {
    if let Some(var_12) = &input.transaction_id {
        object.key("TransactionId").string(var_12);
    }
    if let Some(var_13) = &input.statement {
        object.key("Statement").string(var_13);
    }
    if let Some(var_14) = &input.parameters {
        let mut array_15 = object.key("Parameters").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_value_holder(
                    &mut object_17,
                    item_16,
                );
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_crate_model_fetch_page_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FetchPageRequest,
) {
    if let Some(var_18) = &input.transaction_id {
        object.key("TransactionId").string(var_18);
    }
    if let Some(var_19) = &input.next_page_token {
        object.key("NextPageToken").string(var_19);
    }
}

pub fn serialize_structure_crate_model_end_session_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndSessionRequest,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_value_holder(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ValueHolder,
) {
    if let Some(var_20) = &input.ion_binary {
        object
            .key("IonBinary")
            .string_unchecked(&smithy_types::base64::encode(var_20));
    }
    if let Some(var_21) = &input.ion_text {
        object.key("IonText").string(var_21);
    }
}
