// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(Debug)]
pub struct CommandStreamMarshaller;

impl CommandStreamMarshaller {
    pub fn new() -> Self {
        CommandStreamMarshaller
    }
}
impl aws_smithy_eventstream::frame::MarshallMessage for CommandStreamMarshaller {
    type Input = crate::model::CommandStream;
    fn marshall(
        &self,
        input: Self::Input,
    ) -> std::result::Result<
        aws_smithy_eventstream::frame::Message,
        aws_smithy_eventstream::error::Error,
    > {
        let mut headers = Vec::new();
        headers.push(aws_smithy_eventstream::frame::Header::new(
            ":message-type",
            aws_smithy_eventstream::frame::HeaderValue::String("event".into()),
        ));
        let payload = match input {
            Self::Input::StartTransaction(inner) => {
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":event-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("StartTransaction".into()),
                ));
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":content-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("application/json".into()),
                ));
                crate::operation_ser::serialize_member_com_amazonaws_qldb_sessionv2_command_stream_start_transaction(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
            Self::Input::EndSession(inner) => {
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":event-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("EndSession".into()),
                ));
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":content-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("application/json".into()),
                ));
                crate::operation_ser::serialize_member_com_amazonaws_qldb_sessionv2_command_stream_end_session(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
            Self::Input::CommitTransaction(inner) => {
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":event-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("CommitTransaction".into()),
                ));
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":content-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("application/json".into()),
                ));
                crate::operation_ser::serialize_member_com_amazonaws_qldb_sessionv2_command_stream_commit_transaction(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
            Self::Input::AbortTransaction(inner) => {
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":event-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("AbortTransaction".into()),
                ));
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":content-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("application/json".into()),
                ));
                crate::operation_ser::serialize_member_com_amazonaws_qldb_sessionv2_command_stream_abort_transaction(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
            Self::Input::ExecuteStatement(inner) => {
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":event-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("ExecuteStatement".into()),
                ));
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":content-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("application/json".into()),
                ));
                crate::operation_ser::serialize_member_com_amazonaws_qldb_sessionv2_command_stream_execute_statement(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
            Self::Input::FetchPage(inner) => {
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":event-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("FetchPage".into()),
                ));
                headers.push(aws_smithy_eventstream::frame::Header::new(
                    ":content-type",
                    aws_smithy_eventstream::frame::HeaderValue::String("application/json".into()),
                ));
                crate::operation_ser::serialize_member_com_amazonaws_qldb_sessionv2_command_stream_fetch_page(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
        };
        Ok(aws_smithy_eventstream::frame::Message::new_from_parts(
            headers, payload,
        ))
    }
}

#[non_exhaustive]
#[derive(Debug)]
pub struct ResultStreamUnmarshaller;

impl ResultStreamUnmarshaller {
    pub fn new() -> Self {
        ResultStreamUnmarshaller
    }
}
impl aws_smithy_eventstream::frame::UnmarshallMessage for ResultStreamUnmarshaller {
    type Output = crate::model::ResultStream;
    type Error = crate::error::SendCommandError;
    fn unmarshall(
        &self,
        message: &aws_smithy_eventstream::frame::Message,
    ) -> std::result::Result<
        aws_smithy_eventstream::frame::UnmarshalledMessage<Self::Output, Self::Error>,
        aws_smithy_eventstream::error::Error,
    > {
        let response_headers = aws_smithy_eventstream::smithy::parse_response_headers(&message)?;
        match response_headers.message_type.as_str() {
            "event" => {
                match response_headers.smithy_type.as_str() {
                    "StartTransaction" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_start_transaction_result_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall StartTransaction: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::StartTransaction(parsed),
                        ))
                    }
                    "EndSession" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_end_session_result_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall EndSession: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::EndSession(parsed),
                        ))
                    }
                    "CommitTransaction" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_commit_transaction_result_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall CommitTransaction: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::CommitTransaction(parsed),
                        ))
                    }
                    "AbortTransaction" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_abort_transaction_result_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall AbortTransaction: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::AbortTransaction(parsed),
                        ))
                    }
                    "ExecuteStatement" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_execute_statement_result_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall ExecuteStatement: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::ExecuteStatement(parsed),
                        ))
                    }
                    "FetchPage" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_fetch_page_result_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall FetchPage: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::FetchPage(parsed),
                        ))
                    }
                    "TransactionError" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_transaction_error_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall TransactionError: {}", err))
                                            })?
                        ;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::TransactionError(parsed),
                        ))
                    }
                    "StatementError" => {
                        let parsed =
                            crate::json_deser::deser_structure_crate_model_statement_error_payload(
                                &message.payload()[..],
                            )
                            .map_err(|err| {
                                aws_smithy_eventstream::error::Error::Unmarshalling(format!(
                                    "failed to unmarshall StatementError: {}",
                                    err
                                ))
                            })?;
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::ResultStream::StatementError(parsed),
                        ))
                    }
                    smithy_type => {
                        return Err(aws_smithy_eventstream::error::Error::Unmarshalling(
                            format!("unrecognized :event-type: {}", smithy_type),
                        ));
                    }
                }
            }
            "exception" => {
                let generic =
                    match crate::json_deser::parse_event_stream_generic_error(message.payload()) {
                        Ok(generic) => generic,
                        Err(err) => {
                            return Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                crate::error::SendCommandError::unhandled(err),
                            ))
                        }
                    };
                Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                    crate::error::SendCommandError::generic(generic),
                ))
            }
            value => {
                return Err(aws_smithy_eventstream::error::Error::Unmarshalling(
                    format!("unrecognized :message-type: {}", value),
                ));
            }
        }
    }
}
