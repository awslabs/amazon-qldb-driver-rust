// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ResultStream {
    CommandResult(crate::model::CommandResult),
}
impl ResultStream {
    #[allow(irrefutable_let_patterns)]
    pub fn as_command_result(&self) -> std::result::Result<&crate::model::CommandResult, &Self> {
        if let ResultStream::CommandResult(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_command_result(&self) -> bool {
        self.as_command_result().is_ok()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CommandResult {
    pub status_code: std::option::Option<std::string::String>,
    pub start_transaction: std::option::Option<crate::model::StartTransactionResult>,
    pub end_session: std::option::Option<crate::model::EndSessionResult>,
    pub commit_transaction: std::option::Option<crate::model::CommitTransactionResult>,
    pub abort_transaction: std::option::Option<crate::model::AbortTransactionResult>,
    pub execute_statement: std::option::Option<crate::model::ExecuteStatementResult>,
    pub fetch_page: std::option::Option<crate::model::FetchPageResult>,
}
impl std::fmt::Debug for CommandResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CommandResult");
        formatter.field("status_code", &self.status_code);
        formatter.field("start_transaction", &self.start_transaction);
        formatter.field("end_session", &self.end_session);
        formatter.field("commit_transaction", &self.commit_transaction);
        formatter.field("abort_transaction", &self.abort_transaction);
        formatter.field("execute_statement", &self.execute_statement);
        formatter.field("fetch_page", &self.fetch_page);
        formatter.finish()
    }
}
/// See [`CommandResult`](crate::model::CommandResult)
pub mod command_result {
    /// A builder for [`CommandResult`](crate::model::CommandResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status_code: std::option::Option<std::string::String>,
        pub(crate) start_transaction: std::option::Option<crate::model::StartTransactionResult>,
        pub(crate) end_session: std::option::Option<crate::model::EndSessionResult>,
        pub(crate) commit_transaction: std::option::Option<crate::model::CommitTransactionResult>,
        pub(crate) abort_transaction: std::option::Option<crate::model::AbortTransactionResult>,
        pub(crate) execute_statement: std::option::Option<crate::model::ExecuteStatementResult>,
        pub(crate) fetch_page: std::option::Option<crate::model::FetchPageResult>,
    }
    impl Builder {
        pub fn status_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_code = Some(input.into());
            self
        }
        pub fn set_status_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status_code = input;
            self
        }
        pub fn start_transaction(mut self, input: crate::model::StartTransactionResult) -> Self {
            self.start_transaction = Some(input);
            self
        }
        pub fn set_start_transaction(
            mut self,
            input: std::option::Option<crate::model::StartTransactionResult>,
        ) -> Self {
            self.start_transaction = input;
            self
        }
        pub fn end_session(mut self, input: crate::model::EndSessionResult) -> Self {
            self.end_session = Some(input);
            self
        }
        pub fn set_end_session(
            mut self,
            input: std::option::Option<crate::model::EndSessionResult>,
        ) -> Self {
            self.end_session = input;
            self
        }
        pub fn commit_transaction(mut self, input: crate::model::CommitTransactionResult) -> Self {
            self.commit_transaction = Some(input);
            self
        }
        pub fn set_commit_transaction(
            mut self,
            input: std::option::Option<crate::model::CommitTransactionResult>,
        ) -> Self {
            self.commit_transaction = input;
            self
        }
        pub fn abort_transaction(mut self, input: crate::model::AbortTransactionResult) -> Self {
            self.abort_transaction = Some(input);
            self
        }
        pub fn set_abort_transaction(
            mut self,
            input: std::option::Option<crate::model::AbortTransactionResult>,
        ) -> Self {
            self.abort_transaction = input;
            self
        }
        pub fn execute_statement(mut self, input: crate::model::ExecuteStatementResult) -> Self {
            self.execute_statement = Some(input);
            self
        }
        pub fn set_execute_statement(
            mut self,
            input: std::option::Option<crate::model::ExecuteStatementResult>,
        ) -> Self {
            self.execute_statement = input;
            self
        }
        pub fn fetch_page(mut self, input: crate::model::FetchPageResult) -> Self {
            self.fetch_page = Some(input);
            self
        }
        pub fn set_fetch_page(
            mut self,
            input: std::option::Option<crate::model::FetchPageResult>,
        ) -> Self {
            self.fetch_page = input;
            self
        }
        /// Consumes the builder and constructs a [`CommandResult`](crate::model::CommandResult)
        pub fn build(self) -> crate::model::CommandResult {
            crate::model::CommandResult {
                status_code: self.status_code,
                start_transaction: self.start_transaction,
                end_session: self.end_session,
                commit_transaction: self.commit_transaction,
                abort_transaction: self.abort_transaction,
                execute_statement: self.execute_statement,
                fetch_page: self.fetch_page,
            }
        }
    }
}
impl CommandResult {
    /// Creates a new builder-style object to manufacture [`CommandResult`](crate::model::CommandResult)
    pub fn builder() -> crate::model::command_result::Builder {
        crate::model::command_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FetchPageResult {
    pub page: std::option::Option<crate::model::Page>,
    pub timing_information: std::option::Option<crate::model::TimingInformation>,
    pub consumed_i_os: std::option::Option<crate::model::IoUsage>,
}
impl std::fmt::Debug for FetchPageResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FetchPageResult");
        formatter.field("page", &self.page);
        formatter.field("timing_information", &self.timing_information);
        formatter.field("consumed_i_os", &self.consumed_i_os);
        formatter.finish()
    }
}
/// See [`FetchPageResult`](crate::model::FetchPageResult)
pub mod fetch_page_result {
    /// A builder for [`FetchPageResult`](crate::model::FetchPageResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) page: std::option::Option<crate::model::Page>,
        pub(crate) timing_information: std::option::Option<crate::model::TimingInformation>,
        pub(crate) consumed_i_os: std::option::Option<crate::model::IoUsage>,
    }
    impl Builder {
        pub fn page(mut self, input: crate::model::Page) -> Self {
            self.page = Some(input);
            self
        }
        pub fn set_page(mut self, input: std::option::Option<crate::model::Page>) -> Self {
            self.page = input;
            self
        }
        pub fn timing_information(mut self, input: crate::model::TimingInformation) -> Self {
            self.timing_information = Some(input);
            self
        }
        pub fn set_timing_information(
            mut self,
            input: std::option::Option<crate::model::TimingInformation>,
        ) -> Self {
            self.timing_information = input;
            self
        }
        pub fn consumed_i_os(mut self, input: crate::model::IoUsage) -> Self {
            self.consumed_i_os = Some(input);
            self
        }
        pub fn set_consumed_i_os(
            mut self,
            input: std::option::Option<crate::model::IoUsage>,
        ) -> Self {
            self.consumed_i_os = input;
            self
        }
        /// Consumes the builder and constructs a [`FetchPageResult`](crate::model::FetchPageResult)
        pub fn build(self) -> crate::model::FetchPageResult {
            crate::model::FetchPageResult {
                page: self.page,
                timing_information: self.timing_information,
                consumed_i_os: self.consumed_i_os,
            }
        }
    }
}
impl FetchPageResult {
    /// Creates a new builder-style object to manufacture [`FetchPageResult`](crate::model::FetchPageResult)
    pub fn builder() -> crate::model::fetch_page_result::Builder {
        crate::model::fetch_page_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IoUsage {
    pub read_i_os: i64,
    pub write_i_os: i64,
}
impl std::fmt::Debug for IoUsage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("IoUsage");
        formatter.field("read_i_os", &self.read_i_os);
        formatter.field("write_i_os", &self.write_i_os);
        formatter.finish()
    }
}
/// See [`IoUsage`](crate::model::IoUsage)
pub mod io_usage {
    /// A builder for [`IoUsage`](crate::model::IoUsage)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) read_i_os: std::option::Option<i64>,
        pub(crate) write_i_os: std::option::Option<i64>,
    }
    impl Builder {
        pub fn read_i_os(mut self, input: i64) -> Self {
            self.read_i_os = Some(input);
            self
        }
        pub fn set_read_i_os(mut self, input: std::option::Option<i64>) -> Self {
            self.read_i_os = input;
            self
        }
        pub fn write_i_os(mut self, input: i64) -> Self {
            self.write_i_os = Some(input);
            self
        }
        pub fn set_write_i_os(mut self, input: std::option::Option<i64>) -> Self {
            self.write_i_os = input;
            self
        }
        /// Consumes the builder and constructs a [`IoUsage`](crate::model::IoUsage)
        pub fn build(self) -> crate::model::IoUsage {
            crate::model::IoUsage {
                read_i_os: self.read_i_os.unwrap_or_default(),
                write_i_os: self.write_i_os.unwrap_or_default(),
            }
        }
    }
}
impl IoUsage {
    /// Creates a new builder-style object to manufacture [`IoUsage`](crate::model::IoUsage)
    pub fn builder() -> crate::model::io_usage::Builder {
        crate::model::io_usage::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TimingInformation {
    pub processing_time_milliseconds: i64,
}
impl std::fmt::Debug for TimingInformation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TimingInformation");
        formatter.field(
            "processing_time_milliseconds",
            &self.processing_time_milliseconds,
        );
        formatter.finish()
    }
}
/// See [`TimingInformation`](crate::model::TimingInformation)
pub mod timing_information {
    /// A builder for [`TimingInformation`](crate::model::TimingInformation)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) processing_time_milliseconds: std::option::Option<i64>,
    }
    impl Builder {
        pub fn processing_time_milliseconds(mut self, input: i64) -> Self {
            self.processing_time_milliseconds = Some(input);
            self
        }
        pub fn set_processing_time_milliseconds(mut self, input: std::option::Option<i64>) -> Self {
            self.processing_time_milliseconds = input;
            self
        }
        /// Consumes the builder and constructs a [`TimingInformation`](crate::model::TimingInformation)
        pub fn build(self) -> crate::model::TimingInformation {
            crate::model::TimingInformation {
                processing_time_milliseconds: self.processing_time_milliseconds.unwrap_or_default(),
            }
        }
    }
}
impl TimingInformation {
    /// Creates a new builder-style object to manufacture [`TimingInformation`](crate::model::TimingInformation)
    pub fn builder() -> crate::model::timing_information::Builder {
        crate::model::timing_information::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Page {
    pub values: std::option::Option<std::vec::Vec<crate::model::ValueHolder>>,
    pub next_page_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Page {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Page");
        formatter.field("values", &self.values);
        formatter.field("next_page_token", &self.next_page_token);
        formatter.finish()
    }
}
/// See [`Page`](crate::model::Page)
pub mod page {
    /// A builder for [`Page`](crate::model::Page)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) values: std::option::Option<std::vec::Vec<crate::model::ValueHolder>>,
        pub(crate) next_page_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn values(mut self, input: impl Into<crate::model::ValueHolder>) -> Self {
            let mut v = self.values.unwrap_or_default();
            v.push(input.into());
            self.values = Some(v);
            self
        }
        pub fn set_values(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ValueHolder>>,
        ) -> Self {
            self.values = input;
            self
        }
        pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_page_token = Some(input.into());
            self
        }
        pub fn set_next_page_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.next_page_token = input;
            self
        }
        /// Consumes the builder and constructs a [`Page`](crate::model::Page)
        pub fn build(self) -> crate::model::Page {
            crate::model::Page {
                values: self.values,
                next_page_token: self.next_page_token,
            }
        }
    }
}
impl Page {
    /// Creates a new builder-style object to manufacture [`Page`](crate::model::Page)
    pub fn builder() -> crate::model::page::Builder {
        crate::model::page::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValueHolder {
    pub ion_binary: std::option::Option<smithy_types::Blob>,
    pub ion_text: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ValueHolder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ValueHolder");
        formatter.field("ion_binary", &self.ion_binary);
        formatter.field("ion_text", &self.ion_text);
        formatter.finish()
    }
}
/// See [`ValueHolder`](crate::model::ValueHolder)
pub mod value_holder {
    /// A builder for [`ValueHolder`](crate::model::ValueHolder)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ion_binary: std::option::Option<smithy_types::Blob>,
        pub(crate) ion_text: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn ion_binary(mut self, input: smithy_types::Blob) -> Self {
            self.ion_binary = Some(input);
            self
        }
        pub fn set_ion_binary(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.ion_binary = input;
            self
        }
        pub fn ion_text(mut self, input: impl Into<std::string::String>) -> Self {
            self.ion_text = Some(input.into());
            self
        }
        pub fn set_ion_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.ion_text = input;
            self
        }
        /// Consumes the builder and constructs a [`ValueHolder`](crate::model::ValueHolder)
        pub fn build(self) -> crate::model::ValueHolder {
            crate::model::ValueHolder {
                ion_binary: self.ion_binary,
                ion_text: self.ion_text,
            }
        }
    }
}
impl ValueHolder {
    /// Creates a new builder-style object to manufacture [`ValueHolder`](crate::model::ValueHolder)
    pub fn builder() -> crate::model::value_holder::Builder {
        crate::model::value_holder::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExecuteStatementResult {
    pub first_page: std::option::Option<crate::model::Page>,
    pub timing_information: std::option::Option<crate::model::TimingInformation>,
    pub consumed_i_os: std::option::Option<crate::model::IoUsage>,
}
impl std::fmt::Debug for ExecuteStatementResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExecuteStatementResult");
        formatter.field("first_page", &self.first_page);
        formatter.field("timing_information", &self.timing_information);
        formatter.field("consumed_i_os", &self.consumed_i_os);
        formatter.finish()
    }
}
/// See [`ExecuteStatementResult`](crate::model::ExecuteStatementResult)
pub mod execute_statement_result {
    /// A builder for [`ExecuteStatementResult`](crate::model::ExecuteStatementResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) first_page: std::option::Option<crate::model::Page>,
        pub(crate) timing_information: std::option::Option<crate::model::TimingInformation>,
        pub(crate) consumed_i_os: std::option::Option<crate::model::IoUsage>,
    }
    impl Builder {
        pub fn first_page(mut self, input: crate::model::Page) -> Self {
            self.first_page = Some(input);
            self
        }
        pub fn set_first_page(mut self, input: std::option::Option<crate::model::Page>) -> Self {
            self.first_page = input;
            self
        }
        pub fn timing_information(mut self, input: crate::model::TimingInformation) -> Self {
            self.timing_information = Some(input);
            self
        }
        pub fn set_timing_information(
            mut self,
            input: std::option::Option<crate::model::TimingInformation>,
        ) -> Self {
            self.timing_information = input;
            self
        }
        pub fn consumed_i_os(mut self, input: crate::model::IoUsage) -> Self {
            self.consumed_i_os = Some(input);
            self
        }
        pub fn set_consumed_i_os(
            mut self,
            input: std::option::Option<crate::model::IoUsage>,
        ) -> Self {
            self.consumed_i_os = input;
            self
        }
        /// Consumes the builder and constructs a [`ExecuteStatementResult`](crate::model::ExecuteStatementResult)
        pub fn build(self) -> crate::model::ExecuteStatementResult {
            crate::model::ExecuteStatementResult {
                first_page: self.first_page,
                timing_information: self.timing_information,
                consumed_i_os: self.consumed_i_os,
            }
        }
    }
}
impl ExecuteStatementResult {
    /// Creates a new builder-style object to manufacture [`ExecuteStatementResult`](crate::model::ExecuteStatementResult)
    pub fn builder() -> crate::model::execute_statement_result::Builder {
        crate::model::execute_statement_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AbortTransactionResult {
    pub timing_information: std::option::Option<crate::model::TimingInformation>,
}
impl std::fmt::Debug for AbortTransactionResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AbortTransactionResult");
        formatter.field("timing_information", &self.timing_information);
        formatter.finish()
    }
}
/// See [`AbortTransactionResult`](crate::model::AbortTransactionResult)
pub mod abort_transaction_result {
    /// A builder for [`AbortTransactionResult`](crate::model::AbortTransactionResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) timing_information: std::option::Option<crate::model::TimingInformation>,
    }
    impl Builder {
        pub fn timing_information(mut self, input: crate::model::TimingInformation) -> Self {
            self.timing_information = Some(input);
            self
        }
        pub fn set_timing_information(
            mut self,
            input: std::option::Option<crate::model::TimingInformation>,
        ) -> Self {
            self.timing_information = input;
            self
        }
        /// Consumes the builder and constructs a [`AbortTransactionResult`](crate::model::AbortTransactionResult)
        pub fn build(self) -> crate::model::AbortTransactionResult {
            crate::model::AbortTransactionResult {
                timing_information: self.timing_information,
            }
        }
    }
}
impl AbortTransactionResult {
    /// Creates a new builder-style object to manufacture [`AbortTransactionResult`](crate::model::AbortTransactionResult)
    pub fn builder() -> crate::model::abort_transaction_result::Builder {
        crate::model::abort_transaction_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CommitTransactionResult {
    pub transaction_id: std::option::Option<std::string::String>,
    pub commit_digest: std::option::Option<smithy_types::Blob>,
    pub timing_information: std::option::Option<crate::model::TimingInformation>,
    pub consumed_i_os: std::option::Option<crate::model::IoUsage>,
}
impl std::fmt::Debug for CommitTransactionResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CommitTransactionResult");
        formatter.field("transaction_id", &self.transaction_id);
        formatter.field("commit_digest", &self.commit_digest);
        formatter.field("timing_information", &self.timing_information);
        formatter.field("consumed_i_os", &self.consumed_i_os);
        formatter.finish()
    }
}
/// See [`CommitTransactionResult`](crate::model::CommitTransactionResult)
pub mod commit_transaction_result {
    /// A builder for [`CommitTransactionResult`](crate::model::CommitTransactionResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transaction_id: std::option::Option<std::string::String>,
        pub(crate) commit_digest: std::option::Option<smithy_types::Blob>,
        pub(crate) timing_information: std::option::Option<crate::model::TimingInformation>,
        pub(crate) consumed_i_os: std::option::Option<crate::model::IoUsage>,
    }
    impl Builder {
        pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transaction_id = Some(input.into());
            self
        }
        pub fn set_transaction_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.transaction_id = input;
            self
        }
        pub fn commit_digest(mut self, input: smithy_types::Blob) -> Self {
            self.commit_digest = Some(input);
            self
        }
        pub fn set_commit_digest(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.commit_digest = input;
            self
        }
        pub fn timing_information(mut self, input: crate::model::TimingInformation) -> Self {
            self.timing_information = Some(input);
            self
        }
        pub fn set_timing_information(
            mut self,
            input: std::option::Option<crate::model::TimingInformation>,
        ) -> Self {
            self.timing_information = input;
            self
        }
        pub fn consumed_i_os(mut self, input: crate::model::IoUsage) -> Self {
            self.consumed_i_os = Some(input);
            self
        }
        pub fn set_consumed_i_os(
            mut self,
            input: std::option::Option<crate::model::IoUsage>,
        ) -> Self {
            self.consumed_i_os = input;
            self
        }
        /// Consumes the builder and constructs a [`CommitTransactionResult`](crate::model::CommitTransactionResult)
        pub fn build(self) -> crate::model::CommitTransactionResult {
            crate::model::CommitTransactionResult {
                transaction_id: self.transaction_id,
                commit_digest: self.commit_digest,
                timing_information: self.timing_information,
                consumed_i_os: self.consumed_i_os,
            }
        }
    }
}
impl CommitTransactionResult {
    /// Creates a new builder-style object to manufacture [`CommitTransactionResult`](crate::model::CommitTransactionResult)
    pub fn builder() -> crate::model::commit_transaction_result::Builder {
        crate::model::commit_transaction_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EndSessionResult {
    pub timing_information: std::option::Option<crate::model::TimingInformation>,
}
impl std::fmt::Debug for EndSessionResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EndSessionResult");
        formatter.field("timing_information", &self.timing_information);
        formatter.finish()
    }
}
/// See [`EndSessionResult`](crate::model::EndSessionResult)
pub mod end_session_result {
    /// A builder for [`EndSessionResult`](crate::model::EndSessionResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) timing_information: std::option::Option<crate::model::TimingInformation>,
    }
    impl Builder {
        pub fn timing_information(mut self, input: crate::model::TimingInformation) -> Self {
            self.timing_information = Some(input);
            self
        }
        pub fn set_timing_information(
            mut self,
            input: std::option::Option<crate::model::TimingInformation>,
        ) -> Self {
            self.timing_information = input;
            self
        }
        /// Consumes the builder and constructs a [`EndSessionResult`](crate::model::EndSessionResult)
        pub fn build(self) -> crate::model::EndSessionResult {
            crate::model::EndSessionResult {
                timing_information: self.timing_information,
            }
        }
    }
}
impl EndSessionResult {
    /// Creates a new builder-style object to manufacture [`EndSessionResult`](crate::model::EndSessionResult)
    pub fn builder() -> crate::model::end_session_result::Builder {
        crate::model::end_session_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartTransactionResult {
    pub transaction_id: std::option::Option<std::string::String>,
    pub timing_information: std::option::Option<crate::model::TimingInformation>,
}
impl std::fmt::Debug for StartTransactionResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartTransactionResult");
        formatter.field("transaction_id", &self.transaction_id);
        formatter.field("timing_information", &self.timing_information);
        formatter.finish()
    }
}
/// See [`StartTransactionResult`](crate::model::StartTransactionResult)
pub mod start_transaction_result {
    /// A builder for [`StartTransactionResult`](crate::model::StartTransactionResult)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transaction_id: std::option::Option<std::string::String>,
        pub(crate) timing_information: std::option::Option<crate::model::TimingInformation>,
    }
    impl Builder {
        pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transaction_id = Some(input.into());
            self
        }
        pub fn set_transaction_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.transaction_id = input;
            self
        }
        pub fn timing_information(mut self, input: crate::model::TimingInformation) -> Self {
            self.timing_information = Some(input);
            self
        }
        pub fn set_timing_information(
            mut self,
            input: std::option::Option<crate::model::TimingInformation>,
        ) -> Self {
            self.timing_information = input;
            self
        }
        /// Consumes the builder and constructs a [`StartTransactionResult`](crate::model::StartTransactionResult)
        pub fn build(self) -> crate::model::StartTransactionResult {
            crate::model::StartTransactionResult {
                transaction_id: self.transaction_id,
                timing_information: self.timing_information,
            }
        }
    }
}
impl StartTransactionResult {
    /// Creates a new builder-style object to manufacture [`StartTransactionResult`](crate::model::StartTransactionResult)
    pub fn builder() -> crate::model::start_transaction_result::Builder {
        crate::model::start_transaction_result::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum CommandStream {
    AbortTransaction(crate::model::AbortTransactionRequest),
    CommitTransaction(crate::model::CommitTransactionRequest),
    EndSession(crate::model::EndSessionRequest),
    ExecuteStatement(crate::model::ExecuteStatementRequest),
    FetchPage(crate::model::FetchPageRequest),
    StartTransaction(crate::model::StartTransactionRequest),
}
impl CommandStream {
    pub fn as_abort_transaction(
        &self,
    ) -> std::result::Result<&crate::model::AbortTransactionRequest, &Self> {
        if let CommandStream::AbortTransaction(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_abort_transaction(&self) -> bool {
        self.as_abort_transaction().is_ok()
    }
    pub fn as_commit_transaction(
        &self,
    ) -> std::result::Result<&crate::model::CommitTransactionRequest, &Self> {
        if let CommandStream::CommitTransaction(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_commit_transaction(&self) -> bool {
        self.as_commit_transaction().is_ok()
    }
    pub fn as_end_session(&self) -> std::result::Result<&crate::model::EndSessionRequest, &Self> {
        if let CommandStream::EndSession(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_end_session(&self) -> bool {
        self.as_end_session().is_ok()
    }
    pub fn as_execute_statement(
        &self,
    ) -> std::result::Result<&crate::model::ExecuteStatementRequest, &Self> {
        if let CommandStream::ExecuteStatement(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_execute_statement(&self) -> bool {
        self.as_execute_statement().is_ok()
    }
    pub fn as_fetch_page(&self) -> std::result::Result<&crate::model::FetchPageRequest, &Self> {
        if let CommandStream::FetchPage(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_fetch_page(&self) -> bool {
        self.as_fetch_page().is_ok()
    }
    pub fn as_start_transaction(
        &self,
    ) -> std::result::Result<&crate::model::StartTransactionRequest, &Self> {
        if let CommandStream::StartTransaction(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_start_transaction(&self) -> bool {
        self.as_start_transaction().is_ok()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EndSessionRequest {}
impl std::fmt::Debug for EndSessionRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EndSessionRequest");
        formatter.finish()
    }
}
/// See [`EndSessionRequest`](crate::model::EndSessionRequest)
pub mod end_session_request {
    /// A builder for [`EndSessionRequest`](crate::model::EndSessionRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EndSessionRequest`](crate::model::EndSessionRequest)
        pub fn build(self) -> crate::model::EndSessionRequest {
            crate::model::EndSessionRequest {}
        }
    }
}
impl EndSessionRequest {
    /// Creates a new builder-style object to manufacture [`EndSessionRequest`](crate::model::EndSessionRequest)
    pub fn builder() -> crate::model::end_session_request::Builder {
        crate::model::end_session_request::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FetchPageRequest {
    pub transaction_id: std::option::Option<std::string::String>,
    pub next_page_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for FetchPageRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FetchPageRequest");
        formatter.field("transaction_id", &self.transaction_id);
        formatter.field("next_page_token", &self.next_page_token);
        formatter.finish()
    }
}
/// See [`FetchPageRequest`](crate::model::FetchPageRequest)
pub mod fetch_page_request {
    /// A builder for [`FetchPageRequest`](crate::model::FetchPageRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transaction_id: std::option::Option<std::string::String>,
        pub(crate) next_page_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transaction_id = Some(input.into());
            self
        }
        pub fn set_transaction_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.transaction_id = input;
            self
        }
        pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_page_token = Some(input.into());
            self
        }
        pub fn set_next_page_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.next_page_token = input;
            self
        }
        /// Consumes the builder and constructs a [`FetchPageRequest`](crate::model::FetchPageRequest)
        pub fn build(self) -> crate::model::FetchPageRequest {
            crate::model::FetchPageRequest {
                transaction_id: self.transaction_id,
                next_page_token: self.next_page_token,
            }
        }
    }
}
impl FetchPageRequest {
    /// Creates a new builder-style object to manufacture [`FetchPageRequest`](crate::model::FetchPageRequest)
    pub fn builder() -> crate::model::fetch_page_request::Builder {
        crate::model::fetch_page_request::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExecuteStatementRequest {
    pub transaction_id: std::option::Option<std::string::String>,
    pub statement: std::option::Option<std::string::String>,
    pub parameters: std::option::Option<std::vec::Vec<crate::model::ValueHolder>>,
}
impl std::fmt::Debug for ExecuteStatementRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExecuteStatementRequest");
        formatter.field("transaction_id", &self.transaction_id);
        formatter.field("statement", &self.statement);
        formatter.field("parameters", &self.parameters);
        formatter.finish()
    }
}
/// See [`ExecuteStatementRequest`](crate::model::ExecuteStatementRequest)
pub mod execute_statement_request {
    /// A builder for [`ExecuteStatementRequest`](crate::model::ExecuteStatementRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transaction_id: std::option::Option<std::string::String>,
        pub(crate) statement: std::option::Option<std::string::String>,
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::ValueHolder>>,
    }
    impl Builder {
        pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transaction_id = Some(input.into());
            self
        }
        pub fn set_transaction_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.transaction_id = input;
            self
        }
        pub fn statement(mut self, input: impl Into<std::string::String>) -> Self {
            self.statement = Some(input.into());
            self
        }
        pub fn set_statement(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.statement = input;
            self
        }
        pub fn parameters(mut self, input: impl Into<crate::model::ValueHolder>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ValueHolder>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// Consumes the builder and constructs a [`ExecuteStatementRequest`](crate::model::ExecuteStatementRequest)
        pub fn build(self) -> crate::model::ExecuteStatementRequest {
            crate::model::ExecuteStatementRequest {
                transaction_id: self.transaction_id,
                statement: self.statement,
                parameters: self.parameters,
            }
        }
    }
}
impl ExecuteStatementRequest {
    /// Creates a new builder-style object to manufacture [`ExecuteStatementRequest`](crate::model::ExecuteStatementRequest)
    pub fn builder() -> crate::model::execute_statement_request::Builder {
        crate::model::execute_statement_request::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AbortTransactionRequest {}
impl std::fmt::Debug for AbortTransactionRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AbortTransactionRequest");
        formatter.finish()
    }
}
/// See [`AbortTransactionRequest`](crate::model::AbortTransactionRequest)
pub mod abort_transaction_request {
    /// A builder for [`AbortTransactionRequest`](crate::model::AbortTransactionRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AbortTransactionRequest`](crate::model::AbortTransactionRequest)
        pub fn build(self) -> crate::model::AbortTransactionRequest {
            crate::model::AbortTransactionRequest {}
        }
    }
}
impl AbortTransactionRequest {
    /// Creates a new builder-style object to manufacture [`AbortTransactionRequest`](crate::model::AbortTransactionRequest)
    pub fn builder() -> crate::model::abort_transaction_request::Builder {
        crate::model::abort_transaction_request::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CommitTransactionRequest {
    pub transaction_id: std::option::Option<std::string::String>,
    pub commit_digest: std::option::Option<smithy_types::Blob>,
}
impl std::fmt::Debug for CommitTransactionRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CommitTransactionRequest");
        formatter.field("transaction_id", &self.transaction_id);
        formatter.field("commit_digest", &self.commit_digest);
        formatter.finish()
    }
}
/// See [`CommitTransactionRequest`](crate::model::CommitTransactionRequest)
pub mod commit_transaction_request {
    /// A builder for [`CommitTransactionRequest`](crate::model::CommitTransactionRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transaction_id: std::option::Option<std::string::String>,
        pub(crate) commit_digest: std::option::Option<smithy_types::Blob>,
    }
    impl Builder {
        pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transaction_id = Some(input.into());
            self
        }
        pub fn set_transaction_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.transaction_id = input;
            self
        }
        pub fn commit_digest(mut self, input: smithy_types::Blob) -> Self {
            self.commit_digest = Some(input);
            self
        }
        pub fn set_commit_digest(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.commit_digest = input;
            self
        }
        /// Consumes the builder and constructs a [`CommitTransactionRequest`](crate::model::CommitTransactionRequest)
        pub fn build(self) -> crate::model::CommitTransactionRequest {
            crate::model::CommitTransactionRequest {
                transaction_id: self.transaction_id,
                commit_digest: self.commit_digest,
            }
        }
    }
}
impl CommitTransactionRequest {
    /// Creates a new builder-style object to manufacture [`CommitTransactionRequest`](crate::model::CommitTransactionRequest)
    pub fn builder() -> crate::model::commit_transaction_request::Builder {
        crate::model::commit_transaction_request::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartTransactionRequest {
    pub field_to_satisfy_sdk_code_gen: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartTransactionRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartTransactionRequest");
        formatter.field(
            "field_to_satisfy_sdk_code_gen",
            &self.field_to_satisfy_sdk_code_gen,
        );
        formatter.finish()
    }
}
/// See [`StartTransactionRequest`](crate::model::StartTransactionRequest)
pub mod start_transaction_request {
    /// A builder for [`StartTransactionRequest`](crate::model::StartTransactionRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) field_to_satisfy_sdk_code_gen: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn field_to_satisfy_sdk_code_gen(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.field_to_satisfy_sdk_code_gen = Some(input.into());
            self
        }
        pub fn set_field_to_satisfy_sdk_code_gen(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.field_to_satisfy_sdk_code_gen = input;
            self
        }
        /// Consumes the builder and constructs a [`StartTransactionRequest`](crate::model::StartTransactionRequest)
        pub fn build(self) -> crate::model::StartTransactionRequest {
            crate::model::StartTransactionRequest {
                field_to_satisfy_sdk_code_gen: self.field_to_satisfy_sdk_code_gen,
            }
        }
    }
}
impl StartTransactionRequest {
    /// Creates a new builder-style object to manufacture [`StartTransactionRequest`](crate::model::StartTransactionRequest)
    pub fn builder() -> crate::model::start_transaction_request::Builder {
        crate::model::start_transaction_request::Builder::default()
    }
}
